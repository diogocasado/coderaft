#!/usr/bin/bash

#set -x

OLD_PWD=$(pwd)
BASE_PATH=$(cd $(dirname "$0"); pwd)

BUILD_DIR="${BASE_PATH}/builds"

PLATFORM_DIR="${BASE_PATH}/platforms"
DIST_DIR="${BASE_PATH}/dists"
RAFT_DIR="${BASE_PATH}/rafts"
PKG_DIR="${BASE_PATH}/packages"

PLATFORM_FILES=$(ls -1 $PLATFORM_DIR)
DIST_FILES=$(ls -1 $DIST_DIR)
RAFT_FILES=$(ls -1 $RAFT_DIR)

COMMIT=$(git rev-parse --short HEAD)

MODULES_SYNC_COMMIT=0
STRIP_EMPTY_LINES=1

check_dep () {
	local DEP="$1"
	local PKG
	for PKG in $PKGS; do
		if [ "${PKG,,}" == "$DEP" ]; then
			return
		fi
	done
	echo "(Error) Missing dependency $DEP"
	exit 1;
}

check_deps () {
	local DEPS="$@"
	local DEP
	for DEP in $DEPS; do
		check_dep "$DEP"
	done
}

build_check_dirty_submodules () {
	local DIRTY=$(git submodule status | awk '/^[^0-9]/ { print "x" }')
	if [ ! -z "$DIRTY" ]; then
		echo "Commit the following submodules before building:"
		git submodule status | awk '/^[^0-9]/ { print $2 }'
		exit 1;
	fi
}

get_module_commit () {
	local MODULE=$1
	[ $MODULES_SYNC_COMMIT -gt 0 ] && echo $(git submodule status | awk "\$2==\"modules/$MODULE\"{print \$1}")
}

build_export () {
	VAR=$1
	VALUE=${!VAR}
	EXPORTS+=("$VAR=$VALUE")
}

build_print_platforms () {
	for PLATFORM_FILE in ${PLATFORM_FILES[@]}; do
		local PLATFORM_NAME=${PLATFORM_FILE%%.*}
		local PLATFORM_DESC=$(. "$PLATFORM_DIR/$PLATFORM_FILE" > /dev/null 2>&1; echo $PLAT_DESC )
		echo $PLATFORM_NAME: $PLATFORM_DESC
	done
}

build_print_dists () {
	local DIST_FILE
	for DIST_FILE in ${DIST_FILES[@]}; do
		local DIST_NAME=${DIST_FILE%%.*}
		local DIST_DESC=$(. "$DIST_DIR/$DIST_FILE" > /dev/null 2>&1; echo $DIST_DESC )
		echo $DIST_NAME: $DIST_DESC
	done
}

build_print_rafts () {
	local RAFT_FILE
	for RAFT_FILE in ${RAFT_FILES[@]}; do
		local RAFT_NAME=${RAFT_FILE%%.*}
		local RAFT_DESC=$(. "$RAFT_DIR/$RAFT_FILE" > /dev/null 2>&1; echo $RAFT_DESC )
		echo $RAFT_NAME: $RAFT_DESC
	done
}

build_print_usage () {
	echo -e "\nUsage: $(basename $0) platform raft"

	echo -e "\nPlatforms"
	build_print_platforms

	echo -e "\nDistributions"
	build_print_dists

	echo -e "\nRafts"
	build_print_rafts

	echo
	exit 0
}

build_echo_file_raw () {
	local FILE=$1
	if [ -f "$FILE" ]; then
		echo "Read $FILE"
		cat $FILE | awk "$2{print}" >> $BUILD_TMPFILE
	else
		echo "(Error) Unable to find file $FILE"
		exit 2
	fi
}

build_echo_file_comment () {
	local FILE=$1
	if [ -f "$FILE" ]; then
		echo "Read $FILE"
		cat $FILE | awk '{print "# "$0}' >> $BUILD_TMPFILE
	else
		echo "(Error) Unable to find file $FILE"
		exit 2
	fi
}

build_echo_file () {
	local FILE
	for FILE in "$@"; do
		if [ -f "$FILE" ]; then
			echo "Read $FILE"
			local FILE_HASH=$(sha256sum < $FILE)
			echo "# ${FILE##*/} ${FILE_HASH:0:8} " >> $BUILD_TMPFILE
			cat $FILE >> $BUILD_TMPFILE
			local FOUND=1
		else
			if [ -z "$FOUND" ]; then
				echo "(Error) Unable to find file $FILE"
				exit 2
			fi
		fi
	done
}

build_echo_func () {
	local FUNC=$(type $1)
	echo "$FUNC" | awk '/^{/{body=1;next} /^}/{body=0;next} {if (body) print}' >> $BUILD_TMPFILE
}

build_script () {
	local PLATFORM=$1
	local DIST=$2
	local RAFT=$3

	echo "== Build $PLATFORM $DIST $RAFT"

	[ $MODULES_SYNC_COMMIT -gt 0 ] && build_check_dirty_submodules

	local BUILD_TMPFILE=$(mktemp -t coderaft.build.XXXX)
	local BUILD_FILE="${BUILD_DIR}/${PLATFORM,,}_${DIST,,}_${RAFT,,}.bash"

	build_echo_file_raw "${BASE_PATH}/coderaft.bash" "NR==1"
	build_echo_file_comment "${BASE_PATH}/LICENSE"
	build_echo_file_raw "${BASE_PATH}/coderaft.bash" "NR>1"

	local DIST_FILE="${DIST_DIR}/${DIST,,}.bash"
	. "$DIST_FILE"
	build_echo_file $DIST_FILE

	local PLATFORM_FILE="${PLATFORM_DIR}/${PLATFORM,,}.bash"
	. "$PLATFORM_FILE"
	build_echo_file $PLATFORM_FILE

	RAFT_FILE="${RAFT_DIR}/${RAFT,,}.bash"
	. "$RAFT_FILE"
	build_echo_file $RAFT_FILE

	for PKG in $PKGS; do
		echo "== Package ${PKG}"
		local PKG_BUILD_SCRIPT="${PKG_DIR}/${PKG}/build.bash"
		local PKG_FILE="${PKG_DIR}/${PKG}/${PKG}"
		local PKG_FILES="${PKG_FILE}.bash ${PKG_FILE}-${DIST_ID}.bash"

		if [ -f "$PKG_BUILD_SCRIPT" ]; then
			echo "Source $PKG_BUILD_SCRIPT"
			EXPORTS=()
			
			. "$PKG_BUILD_SCRIPT"
			[ $? -gt 0 ] && exit $?

			for EXPORT in "${EXPORTS[@]}"; do
				echo "$EXPORT" >> $BUILD_TMPFILE
			done
		fi

		build_echo_file $PKG_FILES
		local PKG_VAR=${PKG//-/_}
		PKG_VAR=${PKG_VAR^^}
		echo "$PKG_VAR=1" >> $BUILD_TMPFILE
	done

	echo "=="
	echo "floatme" >> $BUILD_TMPFILE

	if [ $STRIP_EMPTY_LINES -gt 0 ]; then
		cat $BUILD_TMPFILE | awk '/^\s*$/{next} {print}' > $BUILD_FILE
	else
		cp $BUILD_TMPFILE $BUILD_FILE
	fi
	echo "Wrote $BUILD_FILE"

	git add $BUILD_FILE
}

cd "$BASE_PATH"

if [ $# -gt 0 ] && [ $# -ne 3 ]; then
	build_print_usage
	exit 0
fi

if [ $# -eq 3 ]; then
	build_script $1 $2 $3
	exit 0
fi

echo "== Coderaft builder =="
if [ "$BUILD_ALL" != 1 ]; then
	echo "Do you wish to build all (y[es]/n[o]) "
	while [ true ]; do
		read -r
		case "$REPLY" in
			[Yy]* ) break;;
			[Nn]* ) exit 1;;
		esac
	done
fi

build_script "digitalocean" "ubuntu" "webnodejs"

